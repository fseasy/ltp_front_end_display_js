<!DOCTYPE html>
<html lang="zh-CN">
    <head>
        <meta charset="utf-8">
        <title>ltp analysis result display in JavaScript developping</title>
        <script type="text/javascript" src="./canvas_ex.js"> </script>
        <script type="text/javascript" src="./draw_obj.js"></script>
        <script type="text/javascript" src="./jquery-latest.js"> </script>
        <link rel="stylesheet" href="./bootstrap.min.css" />
        <style>
            .bg-blue{
                background-color : #0061c2 ;
                color : #FFFFFF ;
            }
            .result-display {
                height : 500px ;
                border : 1px solid #ccc ;
            }
            ul li div.text-item {
                background : #ccc ;
            }
            ul li div.canvasContainer {
                width : 100% ;
                height : 0 ;
                overflow : hidden ;
            }
        </style>
    </head>
    <body>
        <nav class="navbar navbar-default" role="navigation">
            <div class="container">
                <div class="collapse navbar-collapse" >
                    <ul class="nav navbar-nav">
                        <li> <a href="javascript:return 0">新演示</a> </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div class="jumbotron bg-blue">
            <div class="container">
                <h1>新的演示</h1>
                <p>a new display for ltp-cloud . It is now in developping progress ! </p>
            </div>
        </div>
        <div class="container">
            <form class="form-horizontal" role="form">
                <div class="form-group">
                    <label for="inputText" class="sr-only">input text</label>
                    <div class="col-sm-10 ">
                        <textarea id="inputText" class="form-control" rows="3">我是中国人。</textarea>
                    </div>
                    <div class="col-sm-2">
                        <button type="submit" class="btn btn-primary" id="analysis">分析</button>
                    </div>
                </div>
            </form>
            <div class="row">
                <!--<div class="col-sm-12 result-display" id="rstDisplay">
                    
                </div> -->
                <div class="col-sm-12" >
                    <ul class="nav" id="analysisContent">
                        <li>
                            <div class="text-item">段落1句子1：xxxx</div>
                            <div class="canvasContainer" style="height:500px"><canvas >your browser does not support canvas element</canvas></div>
                        </li>
                        <li>
                            <div class="text-item">段落1句子2：xxxx2</div>
                            <div class="canvasContainer"><canvas>your browser does not support canvas element</canvas></div>
                        </li>
                        <li>
                            <div class="text-item">段落1句子1：xxxx</div>
                            <div class="canvasContainer"><canvas>your browser does not support canvas element</canvas></div>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        
        <script type="text/javascript">
            $(document).ready(function(){
                var rstDisplay = $("#rstDisplay") , 
                    analysisBtn ,
                    analysis = null ,
                    lastOpenedEle = null ,
                    intervalId ,
                    getCanvasContainerFromParentSibling = null ,
                    initDom = null ,
                    drawCanvas = null ,
                    switchCanvas = null ,
                    returnAnalysisRst = null ,
                    demo = null ,
                    DRAW_CANVAS_ID = "canvasTest" ,
                    DRAW_PARENT_ID = "analysisContent" , 
                    CANVAS_HEIGHT = 500 
                    ;
                
                demo = new Demo(DRAW_CANVAS_ID) ;
                analysis = function(){
                    var requestArgs = [] ,
                    postData ,
                    targetURL ;
                    
                    requestArgs["api_key"] = "U2G658z15u6Q4RpksQHC9KDevunLIypIHc5nPr5U" ;
                    requestArgs["pattern"] = "all" ;
                    requestArgs["format"] = "json" ;
                    requestArgs["text"] = encodeURI($("#inputText").val()) ;
                    postData = (function(){
                            var tmpStrArray = [] ;
                            for (key in requestArgs) {
                                tmpStrArray.push([key , requestArgs[key]].join("=")) ;
                            }
                            return tmpStrArray.join("&") ;
                    })() ;
                    targetURL = "http://ltpapi.voicecloud.cn/analysis/"
                    //ajax
                    $.ajax({
                        url : targetURL ,
                        type : "POST" ,
                        async : false ,
                        dataType : "jsonp" ,
                        data : postData ,
                        success : function(returnVal){
                            //d.analysis(returnVal[0][0]) ;
                            //d.paint() ;
                            returnAnalysisRst = returnVal ;
                            initDom(DRAW_PARENT_ID , returnVal) ;
                            //first , make the first text item be the lastOpenedEle to init the draw state
                            lastOpenedEle = document.getElementById(DRAW_PARENT_ID).getElementsByTagName("DIV")[0] ;
                            drawCanvas(lastOpenedEle) ;
                            lastOpenedEle.parentNode.getElementsByTagName("CANVAS")[0].parentNode.style.height = CANVAS_HEIGHT + "px" ;
                        } ,
                        error : function(errorInfo){
                            console.log(errorInfo) ;
                        }
                    }) ;
                    return false ;
                }
                analysisBtn = $("#analysis") ;
                function changeDisObj(newObj , previousObj){
                    var stepLen = 50 ,
                        newObjOriHeight = newObj.offsetHeight ,
                        previousObjOriHeight = previousObj.offsetHeight 
                        ;
                    //console.log(previousObj) ;
                    newObj.style.height = (stepLen + newObjOriHeight ) + "px" ;
                    previousObj.style.height = (previousObjOriHeight - stepLen ) + "px" ;
                    if(previousObj.offsetHeight <= 0){
                        clearInterval(intervalId) ;
                    }
                }
                getCanvasContainerFromParentSibling = function(parentSibling){
                    return parentSibling.parentNode.getElementsByTagName("CANVAS")[0].parentNode ;
                }
                initDom = function(parentId , sentsObj){
                    var parentContainer = document.getElementById(parentId) ,
                        liEle = document.createElement("LI") ,
                        itemDivEle = document.createElement("DIV") ,
                        canvasDivEle = document.createElement("DIV") ,
                        canvasEle = document.createElement("CANVAS") ,
                        eleCopy ,
                        getSentent = null 
                        ;
                    while(parentContainer.childNodes.length > 0) parentContainer.removeChild(parentContainer.lastChild) ;
                    itemDivEle.setAttribute("class" , "text-item") ;
                    canvasDivEle.setAttribute("class" , "canvasContainer") ;
                    canvasDivEle.appendChild(canvasEle) ;
                    liEle.appendChild(itemDivEle) ;
                    liEle.appendChild(canvasDivEle) ;
                    getSentent = function(sentEle){
                            var wsList = [] ;
                            for(var i = 0 ; i < sentEle.length ; i++){
                                wsList.push(sentEle[i].cont) ;
                            }
                            return wsList.join("") ;
                        }
                    for(var i = 0 ; i < sentsObj.length ; i++){
                        for(var j = 0 ; j < sentsObj[i].length ; j++){
                            eleCopy = liEle.cloneNode(true) ;
                            eleCopy.firstChild.setAttribute("x" , i) ,
                            eleCopy.firstChild.setAttribute("y" , j) ;
                            var sentent = getSentent(sentsObj[i][j]) ;
                            var textNode = document.createTextNode(["段落",i+1,"句子",j+1,":" , sentent].join("")) ;
                            eleCopy.firstChild.appendChild(textNode) ;
                            parentContainer.appendChild(eleCopy) ;
                        }
                    }
                
                }
                drawCanvas = function(itemDivEle){
                    var i = itemDivEle.getAttribute("x") ,
                        j = itemDivEle.getAttribute("y") 
                        ;
                    //first set previous canvas 's id = ""
                    if(lastOpenedEle != itemDivEle) lastOpenedEle.parentNode.getElementsByTagName("CANVAS")[0].setAttribute("id","") ;
                    itemDivEle.parentNode.getElementsByTagName("CANVAS")[0].setAttribute("id" , DRAW_CANVAS_ID) ;
                    demo.addaptWidth() ;
                    demo.analysis(returnAnalysisRst[i][j]) ;
                    demo.paint() ;
                }
                switchCanvas = function(clickedItemDivEle , previousClickedItemDivEle){
                    if(clickedItemDivEle != previousClickedItemDivEle){
                        //clickedItemDivEle is the text-item div , while the function changeDisObj 's param is the canvasContainer div
                        var clickedCanvasContainer = getCanvasContainerFromParentSibling(clickedItemDivEle) ,
                            previousCanvasContainer = getCanvasContainerFromParentSibling(previousClickedItemDivEle)
                            ;
                        //console.log(clickedCanvasContainer) ;
                        //console.log(previousCanvasContainer) ;
                        intervalId = setInterval(function(){
                            changeDisObj(clickedCanvasContainer , previousCanvasContainer) ;
                        }
                        , 10) ;
                    }
                }
                //---------------Event Bind----------------
                analysisBtn.bind("click" , analysis ) ;
                $(window).bind({
                                "mousedown": function(e){demo.downAction(e)} ,
                                "mouseup" :  function(e){demo.upAction(e) },
                                "mousemove" : function(e){demo.moveAction(e)}
                    
                                }) ;
                $("#analysisContent").bind("click" , function(e){
                    var ele = e.target 
                        ;
                    if(ele.getAttribute("class") == "text-item" && ele != lastOpenedEle){
                        drawCanvas(ele) ;
                        (function(previousClicked){
                            switchCanvas(ele , previousClicked) ;
                        })(lastOpenedEle) ;
                        lastOpenedEle = ele ;
                    }
                }) ;
                //----------------First Call--------------------------
                //analysis() ;
            }) ;
        </script>
    </body>
</html>